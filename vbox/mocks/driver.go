// Automatically generated by MockGen. DO NOT EDIT!
// Source: github.com/pivotal-cf/pcfdev-cli/vbox (interfaces: Driver)

package mocks

import (
	gomock "github.com/golang/mock/gomock"
	network "github.com/pivotal-cf/pcfdev-cli/network"
	vboxdriver "github.com/pivotal-cf/pcfdev-cli/vboxdriver"
)

// Mock of Driver interface
type MockDriver struct {
	ctrl     *gomock.Controller
	recorder *_MockDriverRecorder
}

// Recorder for MockDriver (not exported)
type _MockDriverRecorder struct {
	mock *MockDriver
}

func NewMockDriver(ctrl *gomock.Controller) *MockDriver {
	mock := &MockDriver{ctrl: ctrl}
	mock.recorder = &_MockDriverRecorder{mock}
	return mock
}

func (_m *MockDriver) EXPECT() *_MockDriverRecorder {
	return _m.recorder
}

func (_m *MockDriver) AttachDisk(_param0 string, _param1 string) error {
	ret := _m.ctrl.Call(_m, "AttachDisk", _param0, _param1)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockDriverRecorder) AttachDisk(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "AttachDisk", arg0, arg1)
}

func (_m *MockDriver) AttachNetworkInterface(_param0 string, _param1 string) error {
	ret := _m.ctrl.Call(_m, "AttachNetworkInterface", _param0, _param1)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockDriverRecorder) AttachNetworkInterface(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "AttachNetworkInterface", arg0, arg1)
}

func (_m *MockDriver) CloneDisk(_param0 string, _param1 string) error {
	ret := _m.ctrl.Call(_m, "CloneDisk", _param0, _param1)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockDriverRecorder) CloneDisk(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CloneDisk", arg0, arg1)
}

func (_m *MockDriver) ConfigureHostOnlyInterface(_param0 string, _param1 string) error {
	ret := _m.ctrl.Call(_m, "ConfigureHostOnlyInterface", _param0, _param1)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockDriverRecorder) ConfigureHostOnlyInterface(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ConfigureHostOnlyInterface", arg0, arg1)
}

func (_m *MockDriver) CreateHostOnlyInterface(_param0 string) (string, error) {
	ret := _m.ctrl.Call(_m, "CreateHostOnlyInterface", _param0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockDriverRecorder) CreateHostOnlyInterface(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreateHostOnlyInterface", arg0)
}

func (_m *MockDriver) CreateVM(_param0 string, _param1 string) error {
	ret := _m.ctrl.Call(_m, "CreateVM", _param0, _param1)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockDriverRecorder) CreateVM(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreateVM", arg0, arg1)
}

func (_m *MockDriver) DeleteDisk(_param0 string) error {
	ret := _m.ctrl.Call(_m, "DeleteDisk", _param0)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockDriverRecorder) DeleteDisk(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeleteDisk", arg0)
}

func (_m *MockDriver) DestroyVM(_param0 string) error {
	ret := _m.ctrl.Call(_m, "DestroyVM", _param0)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockDriverRecorder) DestroyVM(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DestroyVM", arg0)
}

func (_m *MockDriver) Disks() ([]string, error) {
	ret := _m.ctrl.Call(_m, "Disks")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockDriverRecorder) Disks() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Disks")
}

func (_m *MockDriver) ForwardPort(_param0 string, _param1 string, _param2 string, _param3 string) error {
	ret := _m.ctrl.Call(_m, "ForwardPort", _param0, _param1, _param2, _param3)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockDriverRecorder) ForwardPort(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ForwardPort", arg0, arg1, arg2, arg3)
}

func (_m *MockDriver) GetHostForwardPort(_param0 string, _param1 string) (string, error) {
	ret := _m.ctrl.Call(_m, "GetHostForwardPort", _param0, _param1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockDriverRecorder) GetHostForwardPort(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetHostForwardPort", arg0, arg1)
}

func (_m *MockDriver) GetHostOnlyInterfaces() ([]*network.Interface, error) {
	ret := _m.ctrl.Call(_m, "GetHostOnlyInterfaces")
	ret0, _ := ret[0].([]*network.Interface)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockDriverRecorder) GetHostOnlyInterfaces() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetHostOnlyInterfaces")
}

func (_m *MockDriver) GetMemory(_param0 string) (uint64, error) {
	ret := _m.ctrl.Call(_m, "GetMemory", _param0)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockDriverRecorder) GetMemory(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetMemory", arg0)
}

func (_m *MockDriver) IsInterfaceInUse(_param0 string) (bool, error) {
	ret := _m.ctrl.Call(_m, "IsInterfaceInUse", _param0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockDriverRecorder) IsInterfaceInUse(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "IsInterfaceInUse", arg0)
}

func (_m *MockDriver) PowerOffVM(_param0 string) error {
	ret := _m.ctrl.Call(_m, "PowerOffVM", _param0)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockDriverRecorder) PowerOffVM(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "PowerOffVM", arg0)
}

func (_m *MockDriver) ResumeVM(_param0 string) error {
	ret := _m.ctrl.Call(_m, "ResumeVM", _param0)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockDriverRecorder) ResumeVM(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ResumeVM", arg0)
}

func (_m *MockDriver) RunningVMs() ([]string, error) {
	ret := _m.ctrl.Call(_m, "RunningVMs")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockDriverRecorder) RunningVMs() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "RunningVMs")
}

func (_m *MockDriver) SetCPUs(_param0 string, _param1 int) error {
	ret := _m.ctrl.Call(_m, "SetCPUs", _param0, _param1)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockDriverRecorder) SetCPUs(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetCPUs", arg0, arg1)
}

func (_m *MockDriver) SetMemory(_param0 string, _param1 uint64) error {
	ret := _m.ctrl.Call(_m, "SetMemory", _param0, _param1)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockDriverRecorder) SetMemory(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetMemory", arg0, arg1)
}

func (_m *MockDriver) StartVM(_param0 string) error {
	ret := _m.ctrl.Call(_m, "StartVM", _param0)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockDriverRecorder) StartVM(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "StartVM", arg0)
}

func (_m *MockDriver) StopVM(_param0 string) error {
	ret := _m.ctrl.Call(_m, "StopVM", _param0)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockDriverRecorder) StopVM(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "StopVM", arg0)
}

func (_m *MockDriver) SuspendVM(_param0 string) error {
	ret := _m.ctrl.Call(_m, "SuspendVM", _param0)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockDriverRecorder) SuspendVM(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SuspendVM", arg0)
}

func (_m *MockDriver) UseDNSProxy(_param0 string) error {
	ret := _m.ctrl.Call(_m, "UseDNSProxy", _param0)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockDriverRecorder) UseDNSProxy(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "UseDNSProxy", arg0)
}

func (_m *MockDriver) VBoxManage(_param0 ...string) ([]byte, error) {
	_s := []interface{}{}
	for _, _x := range _param0 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "VBoxManage", _s...)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockDriverRecorder) VBoxManage(arg0 ...interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "VBoxManage", arg0...)
}

func (_m *MockDriver) VMExists(_param0 string) (bool, error) {
	ret := _m.ctrl.Call(_m, "VMExists", _param0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockDriverRecorder) VMExists(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "VMExists", arg0)
}

func (_m *MockDriver) VMState(_param0 string) (string, error) {
	ret := _m.ctrl.Call(_m, "VMState", _param0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockDriverRecorder) VMState(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "VMState", arg0)
}

func (_m *MockDriver) VMs() ([]string, error) {
	ret := _m.ctrl.Call(_m, "VMs")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockDriverRecorder) VMs() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "VMs")
}

func (_m *MockDriver) Version() (*vboxdriver.VBoxDriverVersion, error) {
	ret := _m.ctrl.Call(_m, "Version")
	ret0, _ := ret[0].(*vboxdriver.VBoxDriverVersion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockDriverRecorder) Version() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Version")
}
